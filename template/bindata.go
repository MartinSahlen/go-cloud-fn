// Code generated by go-bindata.
// sources:
// index.js
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4f\x6f\xdc\xc6\x0f\xbd\xef\xa7\x60\x4e\x92\x90\xb5\x94\xcb\x0f\xf8\xc1\xc6\xb6\x40\xd0\x14\x69\xd1\xa4\x41\xec\xa2\x87\x20\x08\xc6\x1a\xee\x6a\xe2\xd1\x50\xe1\x50\xde\x2c\x16\xfa\xee\xc5\xfc\x59\x59\xeb\xd8\x87\x02\x3d\xed\x6a\x48\x3d\xbe\x21\x1f\x49\x35\xcd\x5b\xe5\xb4\x45\x78\xad\xda\xbb\x1d\xd3\xe8\x34\xe0\x3d\x3a\xf1\xa0\xda\x96\x58\x1b\xb7\x03\x21\xf0\x03\xb6\xab\xed\xe8\x5a\x31\xe4\xc0\x77\xa6\x4f\xef\x71\xa9\x95\xa8\x0a\x8e\x2b\x00\x46\x19\xd9\x81\xc3\x3d\x7c\x60\xea\x8d\xc7\xb2\x64\xf4\x64\xef\x71\x0d\x8c\x5f\xb1\x95\x0a\x36\x3f\x45\x5f\x80\xa6\xb9\x1e\xd4\xde\x81\x74\x08\x33\xb0\x72\x1a\x8c\x0b\x9e\xf1\x1c\xdd\x3d\x6c\x99\xfa\xf8\x30\x28\x46\x27\x30\x30\xb5\xe8\x7d\x1d\x41\x5a\x72\x5e\x60\x80\x0d\x30\x7e\x1b\x0d\x63\x59\xb4\x9d\xb1\xfa\x4b\xf6\x2a\xaa\xda\x87\x28\x65\x51\x37\xc7\x63\x7d\xa3\x78\x87\xf2\x8b\xe1\x69\x3a\x1e\xeb\x5f\x73\xd4\xf7\xaa\xc7\x69\x2a\xd6\xf0\xe9\xf3\x3a\x93\x83\x10\xfa\x72\x8e\x85\xee\x7e\x1d\xcf\xa7\xea\x2a\xfe\xde\x2b\x06\xab\xbc\xbc\x43\xef\xd5\x0e\xd3\xe1\x50\x7b\xd1\xc6\xd5\x1e\xe5\x8d\x6b\x29\xa4\xae\x2c\x46\xd9\x5e\xfc\xbf\xc8\xaf\x35\xcd\x1f\xb4\x03\x2f\xca\x69\xc5\x1a\x90\x19\xfa\x84\xe0\x63\x92\x17\x86\x07\x44\x64\xae\xc9\x95\x45\x48\x74\xb1\x86\x12\x99\x17\x69\x4c\x39\x20\x8b\x35\x32\x13\x07\x6b\x2d\x74\x2d\x1c\xa2\x57\x39\xee\x54\x3d\xc0\xd1\x28\x67\x70\x34\xca\x93\x70\x96\x76\xc1\xf6\x23\x18\x2c\x6f\x0e\x9b\x40\xf6\x51\x94\x00\xdf\x5a\xf2\x18\xf0\x5b\xd2\x78\x16\xc0\x6c\xd3\x21\xbc\xd8\x6c\xe0\x55\x35\x9f\x87\xf4\xdc\x74\xc6\x43\x8f\xca\xf9\x58\xf2\xa0\x33\xd8\x2a\x63\x51\x43\x03\x83\x72\xa6\xbd\x43\x5d\xc3\x35\xc1\x1e\xb3\xa4\xa0\x53\xac\xeb\x19\x23\x1d\x96\x33\xd7\x09\xd0\x7a\x3c\x0b\x02\x1f\x93\x28\x93\xaa\x92\x52\x61\x6f\xa4\x8b\x07\x56\x09\x7a\x01\x1a\x65\x18\x25\xa9\x2f\x65\x6d\x89\xf0\x9b\x83\x56\x79\x04\xda\x46\x8e\x7d\xe8\x92\x4e\x64\x58\x83\x84\x1b\x98\x44\x9f\xd1\x0f\xe4\x82\xdb\x6d\x20\xb5\x24\x19\x09\x94\x8b\x44\x3e\x10\x3e\x13\x5a\xd3\xfc\xcd\x46\x12\xd5\x84\xd2\x64\xc5\x34\x41\xf1\x81\xa9\xd0\x9c\xab\xc2\x43\x94\x60\xec\x23\x6f\x76\x4e\xd9\x8c\xf2\xc6\xe9\x40\xd6\xb8\x61\xcc\x3c\x4e\x6a\xdd\x07\xfc\xf2\xf7\xeb\x3f\xdf\xd7\x3e\x16\xda\x6c\x0f\xa9\xa9\xab\x73\x59\xa3\xd3\x29\xad\x81\xdb\xb4\x5a\xcd\xa3\x23\x5c\x1c\x32\x9b\x87\x19\xd1\x45\xe3\x5b\x91\xa1\x64\xfc\x16\x06\x80\x4f\xb5\x0e\xbd\x93\xbd\x5f\x93\x3e\x5c\xad\x56\x00\x7e\x6f\xa4\xed\x20\x78\xd6\x3b\x94\xb2\x68\xc9\x09\x3a\xb9\x90\xc3\x80\x45\x75\x12\x49\xcc\x79\xa1\x86\xc1\x9a\x56\x85\x28\xcd\x57\x4f\xae\xb8\x5c\x9d\xd2\x3a\xa3\xc2\x06\x1e\x5d\x29\x40\xdf\x92\x3e\xcc\x89\xbe\x65\x54\x77\x57\xcf\xe0\x7e\xbf\xd8\xef\xf7\x17\x5b\xe2\xfe\x62\x64\x8b\xa1\x9d\x51\xcf\x81\x82\x50\x11\x02\x5a\x98\x4a\x1e\x19\xb6\xc4\xd0\x5a\x1a\xf5\x3c\xcb\x3c\x68\x0a\x6d\xdd\x19\xbf\x06\x4f\xf0\x75\x0c\x93\xca\xaa\x03\x28\x4b\x6e\x37\x23\x45\xe1\x19\x09\x3e\xcc\x07\xe8\x95\x7b\x01\xef\xd4\xe1\x16\x83\xc4\x7d\x47\xa3\xd5\x69\xcc\xf1\xd8\x0a\x78\xea\x11\xee\x4c\xaa\xe6\xc0\x34\x20\xcf\x48\x81\xed\x29\x07\x91\xdc\xcf\x40\x0c\x8e\xa4\x06\x8b\x52\x78\xb8\x43\x1c\xc0\x48\xd2\xe8\x5e\x1d\x22\x6b\x47\xfb\x35\x28\xbf\x3a\x6b\x41\xe3\xa1\xa3\xfd\x0f\x37\xba\xc5\x4e\xdd\xa3\xaf\x1f\xf2\x1d\x86\xdd\xa3\x6a\xad\x9f\xa8\x50\xf5\xdf\x57\x88\x5a\x41\xb9\xf0\xc2\xa8\xfa\x67\x14\x70\x02\x7c\x16\x4f\xf0\xbb\x34\x83\x55\xe6\x39\x0d\x3d\x8b\x30\xad\xb2\x92\xb7\xa3\xb5\x7f\xb1\xcd\xbe\x03\x93\x50\x4b\x16\x5e\x42\x71\xd9\x34\x05\xbc\x84\x59\xd2\x1d\x79\x29\xaa\x7c\x42\x6c\x76\xc6\xa9\xf0\xea\xd5\x09\x2a\xf4\xd1\xc7\x5c\xbe\x4d\x56\x7c\x11\xa2\x17\x97\x4b\x5a\x69\x13\x15\x1d\x2a\x8d\xec\x93\xad\xce\x4f\xd9\xd6\xa3\x74\xa4\xb3\x29\x3d\x64\x0b\x63\x4f\x82\x5f\x94\xd6\x9c\xcd\x66\xc8\xa6\x91\x6d\x71\x79\xba\x4f\xb8\x62\xea\xcc\xc5\xaa\xcf\x24\x42\x31\x6b\xe9\xd0\xc5\xf5\x3e\xda\xe5\xfe\x08\x83\xe3\x54\xd9\xd8\x1a\x27\x97\x94\x41\x46\x5f\x7b\x51\x32\xfa\x38\x62\xf2\xff\x2f\x71\x47\x2c\x3c\x50\x92\x39\xdf\xaa\x5a\x58\x9c\x4e\xa6\x59\x28\x71\xeb\xd4\xad\x92\xb6\x2b\xcb\x05\x93\x45\xa8\xff\xbd\x7a\x55\x2d\xc7\x57\x9a\x5e\xc7\x63\x58\x45\xf5\x0d\x9b\xdd\x0e\xf9\xed\xcd\xcd\x07\x98\xa6\x15\x7e\x1f\x88\xc5\x7f\x2a\x7e\xfc\x40\xf8\x0c\x9b\xb9\x17\x1e\xcd\xb4\xfc\xe9\xf3\xd4\xcc\xbb\x5a\x4d\x4d\x03\xc7\x63\xda\x43\xff\x22\x42\xfc\x0c\x3b\x83\x5f\xd6\x22\x5a\xeb\x38\xa7\x1f\x22\x38\x1d\x02\xfc\x13\x00\x00\xff\xff\x57\x49\xe3\x75\xd4\x09\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 2516, mode: os.FileMode(420), modTime: time.Unix(1490699525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.js": indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.js": &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
